/* tslint:disable */
/* eslint-disable */
/**
 * Hymnos API OpenAPI
 * Description of the custom **OpenAPI** schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Hymn
 */
export interface Hymn {
    /**
     * 
     * @type {string}
     * @memberof Hymn
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof Hymn
     */
    'title': string | null;
    /**
     * 
     * @type {string}
     * @memberof Hymn
     */
    'author_words': string | null;
    /**
     * 
     * @type {string}
     * @memberof Hymn
     */
    'author_music': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Hymn
     */
    'verses'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Hymn
     */
    'chorus'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Hymn
     */
    'slides_order'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Hymn
     */
    'tags'?: Array<string>;
}
/**
 * 
 * @export
 * @interface HymnosItems
 */
export interface HymnosItems {
    /**
     * 
     * @type {Array<HymnsPack>}
     * @memberof HymnosItems
     */
    'packs': Array<HymnsPack>;
    /**
     * 
     * @type {Array<Hymn>}
     * @memberof HymnosItems
     */
    'hymns': Array<Hymn>;
    /**
     * 
     * @type {Array<Slide>}
     * @memberof HymnosItems
     */
    'slides': Array<Slide>;
}
/**
 * 
 * @export
 * @interface HymnsPack
 */
export interface HymnsPack {
    /**
     * 
     * @type {string}
     * @memberof HymnsPack
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof HymnsPack
     */
    'title': string | null;
    /**
     * 
     * @type {string}
     * @memberof HymnsPack
     */
    'author': string | null;
    /**
     * 
     * @type {string}
     * @memberof HymnsPack
     */
    'version': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof HymnsPack
     */
    'hymns_uuid': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof HymnsPack
     */
    'description': string | null;
}
/**
 * Example:                              chords per line : list[str]    -----------------^----------------     --    | G      G7          C         G |      |     Amazing Grace! (how sweet the sound)   |                             D              |     That saved a wretch like me!           |     G        G7        C      G            |-> lines     I once was lost, but now am found,     |         Em         D     G                 |     Was blind, but now I see.              |                                           --
 * @export
 * @interface Slide
 */
export interface Slide {
    /**
     * 
     * @type {string}
     * @memberof Slide
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof Slide
     */
    'hymn_uuid': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Slide
     */
    'lines': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Slide
     */
    'linesWords'?: Array<string>;
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof Slide
     */
    'chords'?: Array<Array<string>> | null;
    /**
     * 
     * @type {Array<Array<number>>}
     * @memberof Slide
     */
    'chords_pos'?: Array<Array<number>> | null;
}
/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'name': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Download Latest Json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadLatestJsonDataLatestDownloadGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/data/latest/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Download Latest Json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadLatestJsonDataLatestDownloadGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadLatestJsonDataLatestDownloadGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.downloadLatestJsonDataLatestDownloadGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readRootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readRootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readRootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Download Latest Json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadLatestJsonDataLatestDownloadGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.downloadLatestJsonDataLatestDownloadGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRootGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.readRootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Download Latest Json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public downloadLatestJsonDataLatestDownloadGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).downloadLatestJsonDataLatestDownloadGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readRootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readRootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



